"""
Comando para generar datos de prueba masivos del sistema HR
"""

import random
from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group
from django.db import transaction
from django.conf import settings

from employee.factories import (
    GroupFactory, 
    UserFactory, 
    DepartmentFactory, 
    RoleFactory, 
    EmployeeFactory
    )
from employee.models import Employee, Department, Role
from ._utils import (
    ColoredOutput,
    confirm_action,
    print_section_header,
    handle_error,
    print_summary,
    batch_create,
    PRESETS,
    SENIORITY_DISTRIBUTION
)


class Command(BaseCommand):
    help = 'Generar datos de prueba masivos para el sistema HR'
    
    def add_arguments(self, parser):
        """Agregar argumentos al comando"""
        
        # Presets predefinidos
        parser.add_argument(
            '--preset',
            choices=['small', 'medium', 'large'],
            default='medium',
            help='Usar preset predefinido de datos (default: medium)',
        )
        
        # Par√°metros personalizados
        parser.add_argument(
            '--employees',
            type=int,
            help='N√∫mero de empleados a crear (override preset)',
        )
        
        parser.add_argument(
            '--departments',
            type=int,
            help='N√∫mero de departamentos a crear (override preset)',
        )
        
        parser.add_argument(
            '--orphan-users',
            type=int,
            help='N√∫mero de usuarios sin perfil de empleado (override preset)',
        )
        
        # Opciones de control
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Limpiar datos existentes antes de generar nuevos',
        )
        
        parser.add_argument(
            '--no-cache-clear',
            action='store_true',
            help='No limpiar cache despu√©s de generar datos',
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simular generaci√≥n sin crear datos reales',
        )
        
        parser.add_argument(
            '--force',
            action='store_true',
            help='Ejecutar sin confirmaciones (para scripts autom√°ticos)',
        )
    
    def handle(self, *args, **options):
        """Punto de entrada principal"""
        self.stdout.write(ColoredOutput.header("üèóÔ∏è  GENERADOR DE DATOS DEL SISTEMA HR"))
        self.stdout.write("=" * 60)
        
        # Preparar configuraci√≥n
        config = self._prepare_config(options)
        
        # Mostrar configuraci√≥n
        self._show_config(config, options)
        
        # Confirmaci√≥n (si no es --force o --dry-run)
        if not options['force'] and not options['dry_run']:
            if not confirm_action(self, "\n¬øProceder con la generaci√≥n de datos?", default=True):
                self.stdout.write(ColoredOutput.info("Operaci√≥n cancelada"))
                return
        
        # Ejecutar generaci√≥n
        try:
            if options['dry_run']:
                self._dry_run_generation(config)
            else:
                self._generate_data(config, options)
        except Exception as e:
            handle_error(self, e, "durante la generaci√≥n de datos")
    
    def _prepare_config(self, options):
        """Preparar configuraci√≥n basada en preset y overrides"""
        preset_name = options['preset']
        config = PRESETS[preset_name].copy()
        
        # Aplicar overrides si se especificaron
        if options['employees']:
            config['employees'] = options['employees']
        
        if options['departments']:
            config['departments'] = options['departments']
            
        if options['orphan_users']:
            config['orphan_users'] = options['orphan_users']
        
        # Calcular roles autom√°ticamente basado en departamentos
        config['total_roles'] = config['departments'] * config['roles_per_dept']
        
        # Calcular distribuciones basadas en empleados
        config['team_leads_count'] = int(config['employees'] * config['team_leads_ratio'])
        config['terminated_count'] = int(config['employees'] * config['terminated_ratio'])
        config['recent_hires_count'] = int(config['employees'] * config['recent_hires_ratio'])
        
        # Distribuci√≥n de seniority
        config['junior_count'] = int(config['employees'] * SENIORITY_DISTRIBUTION['JUNIOR'])
        config['mid_count'] = int(config['employees'] * SENIORITY_DISTRIBUTION['MID'])
        config['senior_count'] = config['employees'] - config['junior_count'] - config['mid_count']
        
        return config
    
    def _show_config(self, config, options):
        """Mostrar configuraci√≥n que se va a usar"""
        print_section_header(self, f"CONFIGURACI√ìN: PRESET '{options['preset'].upper()}'")
        
        display_config = {
            'preset_usado': options['preset'],
            'departamentos': config['departments'],
            'roles_totales': config['total_roles'],
            'empleados_totales': config['employees'],
            'empleados_junior': config['junior_count'],
            'empleados_mid': config['mid_count'],
            'empleados_senior': config['senior_count'],
            'team_leads': config['team_leads_count'],
            'empleados_terminados': config['terminated_count'],
            'contrataciones_recientes': config['recent_hires_count'],
            'usuarios_sin_perfil': config['orphan_users'],
        }
        
        if options['clear']:
            display_config['accion_previa'] = "üóëÔ∏è LIMPIAR DATOS EXISTENTES"
        
        print_summary(self, display_config)
    
    def _dry_run_generation(self, config):
        """Simular generaci√≥n sin crear datos"""
        print_section_header(self, "SIMULACI√ìN DE GENERACI√ìN (DRY RUN)")
        
        self.stdout.write(ColoredOutput.info("Simulando creaci√≥n de datos..."))
        
        steps = [
            ("üè¢ Grupos de usuarios", 3),
            ("üè¢ Departamentos", config['departments']),
            ("üíº Roles", config['total_roles']),
            ("üë• Empleados Junior", config['junior_count']),
            ("üë• Empleados Mid", config['mid_count']),
            ("üë• Empleados Senior", config['senior_count']),
            ("üëë Team Leads", config['team_leads_count']),
            ("üìÖ Contrataciones recientes", config['recent_hires_count']),
            ("‚ùå Empleados terminados", config['terminated_count']),
            ("üë§ Usuarios sin perfil", config['orphan_users']),
        ]
        
        self.stdout.write("\nüìã Se crear√≠an:")
        for step_name, count in steps:
            self.stdout.write(f"  ‚Ä¢ {count:>3} {step_name}")
        
        total_items = sum(count for _, count in steps)
        self.stdout.write(f"\nüìä Total de items: {ColoredOutput.colored(str(total_items), 'cyan')}")
        self.stdout.write(ColoredOutput.success("\n‚úÖ Simulaci√≥n completada (no se cre√≥ nada)"))
    
    def _generate_data(self, config, options):
        """Ejecutar la generaci√≥n real de datos"""
        print_section_header(self, "GENERANDO DATOS")
        
        created_counts = {}
        
        try:
            with transaction.atomic():
                
                # Paso 0: Limpiar datos existentes si se solicit√≥
                if options['clear']:
                    print_section_header(self, "Limpiando datos existentes")
                    self._clear_existing_data()
                
                # Paso 1: Crear grupos de usuarios
                print_section_header(self, "Creando Grupos de Usuarios")
                groups = self._create_groups()
                created_counts['grupos'] = len(groups)
                
                # Paso 2: Crear departamentos
                print_section_header(self, "Creando Departamentos")
                departments = self._create_departments(config)
                created_counts['departamentos'] = len(departments)
                
                # Paso 3: Crear roles
                print_section_header(self, "Creando Roles")
                roles = self._create_roles(departments, config)
                created_counts['roles'] = len(roles)
                
                # Paso 4: Crear empleados por seniority
                print_section_header(self, "Creando Empleados")
                employees = self._create_employees(roles, config)
                created_counts.update(employees)
                
                # Paso 5: Asignar managers y crear team leads
                print_section_header(self, "Configurando Jerarqu√≠as")
                team_leads = self._setup_hierarchies(config)
                created_counts['team_leads'] = team_leads
                
                # Paso 6: Asignar department managers
                print_section_header(self, "Asignando Managers de Departamento")
                dept_managers = self._assign_department_managers()
                created_counts['department_managers'] = dept_managers
                
                # Paso 7: Crear usuarios sin perfil
                print_section_header(self, "Creando Usuarios sin Perfil")
                orphan_users = self._create_orphan_users(groups, config)
                created_counts['usuarios_sin_perfil'] = len(orphan_users)
            
            # Resumen final
            print_section_header(self, "GENERACI√ìN COMPLETADA")
            print_summary(self, created_counts)
            
            self.stdout.write(ColoredOutput.success("üéâ Datos generados exitosamente"))
            
            # Limpiar cache
            if not options['no_cache_clear']:
                self._clear_cache()
                
        except Exception as e:
            self.stdout.write(ColoredOutput.error(f"‚ùå Error durante la generaci√≥n: {str(e)}"))
            raise
    
    def _clear_existing_data(self):
        """Limpiar datos existentes"""
        from django.core.management import call_command
        call_command('clear_data', '--force', '--keep-superusers')
    
    def _create_groups(self):
        """Crear grupos de usuarios necesarios"""
        groups = []
        for group_name in ['Admin', 'HR', 'Employee']:
            group, created = Group.objects.get_or_create(name=group_name)
            groups.append(group)
            if created:
                self.stdout.write(f"  ‚úì Grupo '{group_name}' creado")
            else:
                self.stdout.write(f"  ‚Ñπ Grupo '{group_name}' ya exist√≠a")
        
        return groups
    
    def _create_departments(self, config):
        """Crear departamentos"""
        departments = batch_create(
            DepartmentFactory,
            count=config['departments'],
            message="Creando departamentos"
        )
        
        return departments
    
    def _create_roles(self, departments, config):
        """Crear roles distribuidos en departamentos"""
        roles = []
        
        for dept in departments:
            dept_roles = batch_create(
                RoleFactory,
                count=config['roles_per_dept'],
                message=f"Creando roles para {dept.name}",
                department=dept
            )
            roles.extend(dept_roles)
        
        return roles
    
    def _create_employees(self, roles, config):
        """Crear empleados con distribuci√≥n de seniority"""
        created_counts = {}
        
        # Crear empleados Junior
        junior_employees = []
        for _ in range(config['junior_count']):
            employee = EmployeeFactory(
                is_junior=True,
                role=random.choice(roles)
            )
            junior_employees.append(employee)
        created_counts['empleados_junior'] = len(junior_employees)
        
        # Crear empleados Mid
        mid_employees = []
        for _ in range(config['mid_count']):
            employee = EmployeeFactory(
                is_mid=True,
                role=random.choice(roles)
            )
            mid_employees.append(employee)
        created_counts['empleados_mid'] = len(mid_employees)
        
        # Crear empleados Senior
        senior_employees = []
        for _ in range(config['senior_count']):
            employee = EmployeeFactory(
                is_senior=True,
                role=random.choice(roles)
            )
            senior_employees.append(employee)
        created_counts['empleados_senior'] = len(senior_employees)
        
        # Crear contrataciones recientes
        recent_hires = []
        for _ in range(config['recent_hires_count']):
            employee = EmployeeFactory(
                recently_hired=True,
                role=random.choice(roles)
            )
            recent_hires.append(employee)
        created_counts['contrataciones_recientes'] = len(recent_hires)
        
        # Crear empleados terminados
        terminated = []
        for _ in range(config['terminated_count']):
            employee = EmployeeFactory(
                is_terminated=True,
                role=random.choice(roles)
            )
            terminated.append(employee)
        created_counts['empleados_terminados'] = len(terminated)
        
        return created_counts
    
    def _setup_hierarchies(self, config):
        """Configurar jerarqu√≠as de managers"""
        # Obtener empleados activos que pueden ser managers
        potential_managers = list(Employee.objects.filter(
            termination_date__isnull=True,
            seniority_level__in=['MID', 'SENIOR']
        ).select_related('user'))
        
        # Obtener empleados que necesitan manager
        employees_needing_manager = list(Employee.objects.filter(
            manager__isnull=True,
            termination_date__isnull=True
        ).select_related('user'))
        
        team_leads_created = 0
        
        # Asignar managers aleatoriamente
        random.shuffle(employees_needing_manager)
        
        for employee in employees_needing_manager:
            if potential_managers and random.random() < 0.7:  # 70% probabilidad de tener manager
                manager = random.choice(potential_managers)
                if manager != employee:  # No puede ser manager de s√≠ mismo
                    employee.manager = manager
                    employee.save()
                    team_leads_created += 1
        
        return team_leads_created
    
    def _assign_department_managers(self):
        """Asignar managers a departamentos"""
        departments = Department.objects.all()
        department_managers_assigned = 0
        
        for dept in departments:
            # Buscar empleados senior en este departamento
            potential_managers = Employee.objects.filter(
                role__department=dept,
                seniority_level__in=['MID', 'SENIOR'],
                termination_date__isnull=True
            )
            
            if potential_managers.exists():
                manager = random.choice(potential_managers)
                dept.department_manager = manager
                dept.save()
                department_managers_assigned += 1
        
        return department_managers_assigned
    
    def _create_orphan_users(self, groups, config):
        """Crear usuarios sin perfil de empleado"""
        orphan_users = []
        employee_group = next(g for g in groups if g.name == 'Employee')
        
        for _ in range(config['orphan_users']):
            user = UserFactory(groups=[employee_group])
            orphan_users.append(user)
        
        return orphan_users
    
    def _clear_cache(self):
        """Limpiar cache despu√©s de la generaci√≥n"""
        try:
            from django.core.cache import cache
            cache.clear()
            self.stdout.write(ColoredOutput.success("‚úì Cache limpiado"))
        except Exception as e:
            self.stdout.write(ColoredOutput.warning(f"‚ö† No se pudo limpiar el cache: {str(e)}"))


def factory_random_choice(items):
    """Helper para Factory Boy: elegir item aleatorio de una lista"""
    return random.choice(items)