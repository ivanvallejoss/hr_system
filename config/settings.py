"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.
"""

from pathlib import Path;
import environ;
import os;
import sys;

BASE_DIR = Path(__file__).resolve().parent.parent


# Configuracion de environ
env = environ.Env(
    # Valores por defecto y tipos de datos
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    DB_PORT=(int, 5432),
)

# leer archivo en .env
environ.Env.read_env(BASE_DIR / '.env')

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

SECRET_KEY = env('SECRET_KEY')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'employee',
    'dashboards',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.SecurityHeadersMiddleware',
    'core.middleware.EmployeeProfileMiddleware',
]

## En caso de estar en el entorno de desarrollo de DEBUG: 
# 1 - agregamos debug_toolbar como app instalada.
# 2 - establecemos local storage para la subida de fotos y archivos.
DEBUG = env('DEBUG')

if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips ] + ["127.0.0.1", "10.0.2.2"] 
    
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'


ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# Detectamos si estamos ejecutando tests.

TESTING = 'test' in sys.argv or 'pytest' in sys.modules

if TESTING:
    #Usamos sqlite en memoria para tests
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:'
        }
    }
    # Password hasher mas rapido para tests
    PASSWORD_HASHERS = {
        'django.contrib.auth.hashers.MD5PasswordHasher',
    }
else:
    # En Produccion intentamos usar DATABASE_URL primero
    import os
    import dj_database_url

    database_url = os.environ.get('DATABASE_URL')

    if database_url:
        DATABASES = {
            'default': dj_database_url.config(
                default=database_url,
                conn_max_age=600,
                conn_health_checks=True,
            )
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': env('DB_NAME'),
                'USER': env('DB_USER'),
                'PASSWORD': env('DB_PASSWORD'),
                'HOST': env('DB_HOST'),
                'PORT': env('DB_PORT'),
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Redireccionamiento de Login/Logout
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters':{
        'verbose':{
            'format': '[{levelname}] {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple':{
            'format': '[{levelname}] {message}',
            'style': '{'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'hr_system.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'errors.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'dashboards': {
            'handlers': ['file', 'error_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'employee': {
            'handlers': ['file', 'error_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'core': {
            'handlers': ['file', 'error_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}

# creamos directorio de logs si no existe
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

#
# ==== PRODUCTION SETTINGS ====
#

import dj_database_url

# Whitenoise configuration (para servir archivos estaticos)
# Database configuration con dj-database-url (para Railway/Render)
if not DEBUG:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # En produccion, usar DATABASE_URL si esta disponible
    database_url = env.get_value('DATABASE_URL', default=None)
    if database_url:
        DATABASES['default'] = dj_database_url.config(
            default=database_url,
            conn_max_age=600,
            conn_health_checks=True
            )

CSRF_TRUSTED_ORIGINS = ['http://*', 'https://web-production-219e3.up.railway.app/']

## En caso de NO encontrarnos en ambiente de desarrollo:
# 1- AGREGAMOS CLOUDINARY A LAS APPS PARA PRODUCCION.
# 2- CONFIGURAMOS LAS VARIABLES DE ENTORNO PARA CLOUDINARY.
# if not DEBUG:
#     INSTALLED_APPS += ['cloudinary_storage', 'cloudinary',]

#     import cloudinary

#     cloudinary.config(
#         cloud_name=env('CLOUDINARY_CLOUD_NAME'),
#         api_key=env('CLOUDINARY_API_KEY'),
#         api_secret=env('CLOUDINARY_API_SECRET'),
#         secure=True
#     )

#     DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'